/**********************************************************************************************************************
 * \file sidhandler.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef BSW_SERVICE_DIAGNOSTICS_HANDLER_SIDHANDLER_H_
#define BSW_SERVICE_DIAGNOSTICS_HANDLER_SIDHANDLER_H_

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include <stdint.h>
#include "cantp.h"
#include "session.h"
#include "uds.h"

#include "uart.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define UDS_POSITIVE_RESPONSE_SID(sid) ((sid) + 0x40)
#define UDS_NEGATIVE_RESPONSE_SID 0x7F

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
 typedef enum
{
    UDS_NRC_POSITIVE_RESPONSE = 0x00,
    UDS_NRC_GENERAL_REJECT = 0x10,
    UDS_NRC_SERVICE_NOT_SUPPORTED = 0x11,
    UDS_NRC_SUB_FUNCTION_NOT_SUPPORTED = 0x12,
    UDS_NRC_INCORRECT_MESSAGE_LENGTH_OR_INVALID_FORMAT = 0x13,
    UDS_NRC_CONDITIONS_NOT_CORRECT = 0x22,
    UDS_NRC_REQUEST_SEQUENCE_ERROR = 0x24,
    UDS_NRC_REQUEST_OUT_OF_RANGE = 0x31,
    UDS_NRC_SECURITY_ACCESS_DENIED = 0x33,
    UDS_NRC_INVALID_KEY = 0x35,
    UDS_NRC_UPLOAD_DOWNLOAD_NOT_ACCEPTED = 0x70,
    UDS_NRC_GENERAL_PROGRAMMING_FAILURE = 0x72,
    UDS_NRC_SUBFUNCTION_NOT_SUPPORTED_IN_ACTIVE_SESSION = 0x7E,
    UDS_NRC_SERVICE_NOT_SUPPORTED_IN_ACTIVE_SESSION = 0x7F,
} UDS_NegativeResponseCode;

/*********************************************************************************************************************/
/*--------------------------------------------Private Variables/Constants--------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
// Session Control Group
void handleSID10(const uint8_t* data, uint16_t length, const uint8_t sid); // Diagnostic Session Control
void handleSID11(const uint8_t* data, uint16_t length, const uint8_t sid); // ECU Reset
void handleSID3E(const uint8_t* data, uint16_t length, const uint8_t sid); // Tester Present

// Read Data Group
void handleSID22(const uint8_t* data, uint16_t length, const uint8_t sid); // Read Data By Identifier
void handleSID2A(const uint8_t* data, uint16_t length, const uint8_t sid); // Read Data By Periodic Identifier

// Write Data Group
void handleSID2E(const uint8_t* data, uint16_t length, const uint8_t sid); // Write Data By Identifier

// DTC Group
void handleSID19(const uint8_t* data, uint16_t length, const uint8_t sid); // Read DTC Information
// void handleSID14(const uint8_t* data, uint16_t length); // Clear Diagnostic Information

// Routine Control Group
void handleSID31(const uint8_t* data, uint16_t length, const uint8_t sid); // Routine Control

// Upload/Download Group
// void handleSID34(const uint8_t* data, uint16_t length); // Request Download
// void handleSID35(const uint8_t* data, uint16_t length); // Request Upload
// void handleSID36(const uint8_t* data, uint16_t length); // Transfer Data
// void handleSID37(const uint8_t* data, uint16_t length); // Request Transfer Exit

#endif /* BSW_SERVICE_DIAGNOSTICS_HANDLER_SIDHANDLER_H_ */
