#include "gpt12.h"


volatile uint16 g_beepInterval = 8000;


// GPT1 타이머 인터럽트 핸들러 - 0.5초마다 BUZZER 토글
IFX_INTERRUPT(IsrGpt1T3Handler, 0, ISR_PRIORITY_GPT1T3_TIMER);
void IsrGpt1T3Handler(void)
{
    // 부저 토글
    buzzerToggle();

    // 주기 감소 (더 이상 줄이지 않도록 최소 한계 체크)
//    if (g_beepInterval > BEEP_MIN_INTERVAL)
//    {
//        g_beepInterval -= BEEP_INTERVAL_STEP;
//        if (g_beepInterval < BEEP_MIN_INTERVAL)
//        {
//            g_beepInterval = BEEP_MIN_INTERVAL;
//        }
//    }

    // 새로운 주기로 타이머 설정
    MODULE_GPT120.T3.B.T3 = g_beepInterval;
}

// GPT2 T6 인터럽트 핸들러 - 0.5초마다 LED 토글
IFX_INTERRUPT(IsrGpt2T6Handler, 0, ISR_PRIORITY_GPT2T6_TIMER);
void IsrGpt2T6Handler(void)
{
    ledUpdateBlinking();
}

// buzzer용 gpt타이머
void gpt1_init (void)
{
    Ifx_GPT12_T3CON_Bits *t3con = (Ifx_GPT12_T3CON_Bits*) &MODULE_GPT120.T3CON.B;

    t3con->T3M = 0;     // 타이머 모드
    t3con->BPS1 = 2;    // 분주기 설정 (25MHz 기준)
    t3con->T3I = 7;     // 인터럽트 우선순위
    t3con->T3UD = 1;    // 카운트 다운 모드
    MODULE_GPT120.T3.B.T3 = g_beepInterval; // 타이머 값

    // 인터럽트 설정 (일단 비활성화 상태)
    Ifx_SRC_SRCR_Bits* src = (Ifx_SRC_SRCR_Bits*) &MODULE_SRC.GPT12.GPT12[0].T3.B;
    src->SRPN = ISR_PRIORITY_GPT1T3_TIMER;
    src->TOS = 0;
    src->CLRR = 1;
    src->SRE = 0; // Enable은 외부에서

    // 타이머 시작
    t3con->T3R = 1;
}

// led용 gpt타이머
void gpt2_init (void)
{
    Ifx_GPT12_T6CON_Bits *t6con = (Ifx_GPT12_T6CON_Bits*) &MODULE_GPT120.T6CON.B;

    t6con->T6M = 0;         // 타이머 모드
    t6con->BPS2 = 2;        // 분주기 설정
    t6con->T6I = 7;         // 인터럽트 우선순위
    t6con->T6UD = 1;        // 카운트 다운
    t6con->T6SR = 1;        // 자동 리로드

    // 0.5초 타이머 값 (24414 = 대략 0.5초)
    MODULE_GPT120.T6.B.T6 = 24414;
    MODULE_GPT120.CAPREL.B.CAPREL = 24414;

    // 인터럽트 설정
    Ifx_SRC_SRCR_Bits *src = (Ifx_SRC_SRCR_Bits*) &MODULE_SRC.GPT12.GPT12[0].T6.B;
    src->SRPN = ISR_PRIORITY_GPT2T6_TIMER;
    src->TOS = 0;
    src->CLRR = 1;
    src->SRE = 1;

    // 타이머 시작
    t6con->T6R = 1;
}

// GPT1 인터럽트 Enable/Disable 제어
void Gpt1_Interrupt_Enable (void)
{
    MODULE_SRC.GPT12.GPT12[0].T3.B.SRE = 1;
}

void Gpt1_Interrupt_Disable (void)
{
    MODULE_SRC.GPT12.GPT12[0].T3.B.SRE = 0;
}

// GPT2 인터럽트 Enable/Disable 제어
void Gpt2_Interrupt_Enable (void)
{
    MODULE_SRC.GPT12.GPT12[0].T6.B.SRE = 1;
}

void Gpt2_Interrupt_Disable (void)
{
    MODULE_SRC.GPT12.GPT12[0].T6.B.SRE = 0;
}

// GPT12 전체 초기화
void gpt12Init ()
{
    IfxScuWdt_clearCpuEndinit(IfxScuWdt_getGlobalEndinitPassword());
    MODULE_GPT120.CLC.U = 0;
    IfxScuWdt_setCpuEndinit(IfxScuWdt_getGlobalEndinitPassword());

    gpt1_init();
    gpt2_init();
}


// 10ms 주기 진단 타이머 인터럽트 핸들러 추가
IFX_INTERRUPT(IsrGpt12T2Handler, 0, ISR_PRIORITY_GPT12_SCHEDULER);
void IsrGpt12T2Handler(void)
{
    // 이 함수는 정확히 10ms마다 CPU에 의해 자동으로 호출됩니다.
    session_mainFunction();       // 1. 세션 타임아웃을 검사합니다.
    diagnoseTofSensor();          // 2. ToF 센서의 고장 여부를 진단합니다.
    diagnoseUltrasonicSensors();  // 3. 초음파 센서들의 고장 여부를 진단합니다.
}

// 10ms 주기 스케줄러 타이머(T2) 초기화 함수
// =========================================================================
static void gpt12_scheduler_init(void)
{
    // --- 1. 공유 자원인 '분주기(Prescaler)' 설정 ---
    // T2 타이머가 속한 GPT1 블록의 분주기(BPS1)는 T3CON 레지스터를 통해 설정합니다.
    MODULE_GPT120.T3CON.B.BPS1 = 2; // 예: f_GPT / 64 (시스템 클럭에 따라 조정 필요)

    // --- 2. T2 타이머의 개별 동작 방식 설정 ---
    MODULE_GPT120.T2CON.B.T2M = 0;   // 타이머 모드 (가장 기본)
    MODULE_GPT120.T2CON.B.T2UD = 0;  // 카운트 업 (0부터 세어 올라감)

    // --- 3. 10ms에 해당하는 타이머 값 설정 ---
    // 타이머가 이 값에 도달하면 인터럽트를 발생시키고 0으로 리셋됩니다.
    // 예시 값: f_GPT1 = 100MHz, BPS1=2 (f_GPT/64) -> f_T2 = 1.5625MHz
    // 10ms = 0.01s -> Ticks = 1,562,500 * 0.01 = 15625
    MODULE_GPT120.CAPREL.U = 15625;

    // --- 4. T2 타이머 인터럽트 설정 ---
    // T2 타이머의 인터럽트 요청(request)을 CPU에 연결합니다.
    volatile Ifx_SRC_SRCR* src = &MODULE_SRC.GPT12.GPT12[0].T2;
    src->B.SRPN = ISR_PRIORITY_GPT12_SCHEDULER; // 우선순위 설정
    src->B.TOS = IfxSrc_Tos_cpu0;               // CPU0에서 처리
    src->B.CLRR = 1;                            // 인터럽트 플래그 클리어
    src->B.SRE = 1;                             // 인터럽트 활성화

    // --- 5. T2 타이머 시작 ---
    MODULE_GPT120.T2CON.B.T2R = 1;   // Run 비트를 1로 설정하여 카운트 시작
}

// GPT12 모듈 전체 초기화 함수
// =========================================================================
void gpt12_for_uds_Init (void)
{
    // GPT12 모듈의 클럭을 활성화합니다.
    IfxScuWdt_clearCpuEndinit(IfxScuWdt_getCpuWatchdogPassword());
    MODULE_GPT120.CLC.U = 0;
    IfxScuWdt_setCpuEndinit(IfxScuWdt_getCpuWatchdogPassword());

    // 우리가 만든 10ms 주기 스케줄러 타이머를 초기화하고 시작합니다.
    gpt12_scheduler_init();
}
